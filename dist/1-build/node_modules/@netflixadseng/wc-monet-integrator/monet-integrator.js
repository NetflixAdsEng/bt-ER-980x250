!(function() {
  /**
   * Network
   *
   *
   *
   */

  // deprecated
  function chooseExitURL(desktopExitURL, iosExitURL, androidExitURL) {
    var exitURL = null;
    if (Utils.isMobile) {
      exitURL = Utils.isiOS ? iosExitURL : androidExitURL;
    }
    return exitURL || desktopExitURL;
  }

  function doHTTPRequest(url) {
    return new Promise(function(resolve, reject) {
      var xhr = new XMLHttpRequest();
      xhr.addEventListener('load', function() {
        if (xhr.status >= 200 && xhr.status < 300) {
          resolve(xhr.response);
          return;
        }
        var errorMessage = 'Failed to load ' + url + ' [' + xhr.status + ']' + xhr.responseText;
        reject(new Error(errorMessage));
      });
      xhr.addEventListener('error', function(errorEvent) {
        var message = 'Error in loading ' + url;
        reject(errorEvent.error || new Error(message));
      });
      xhr.open('GET', url);
      xhr.send();
    });
  }

  function listenForLoad(target) {
    return new Promise(function(resolve, reject) {
      var onLoad = null;
      var onError = null;
      var onDone = function() {
        target.removeEventListener('load', onLoad);
        target.removeEventListener('error', onError);
      };
      onLoad = function() {
        onDone();
        resolve(null);
      };
      onError = function(event) {
        onDone();
        reject(event.error);
      };
      target.addEventListener('load', onLoad);
      target.addEventListener('error', onError);
    });
  }

  /**
   * Utility
   *
   *
   *
   */
  function log(level) {
    if (!!window.Enabler && Enabler.isServingInLiveEnvironment() && level !== 'error') {
      return;
    }
    console[level].apply(console, Array.prototype.slice.call(arguments, 1));
  }

  /**
   * ElementCreationObserver
   *
   *
   *
   */
  (function() {
    function elementMatchesSelector(element, selector) {
      if (element.nodeType !== Node.ELEMENT_NODE) {
        return false;
      }
      var matcher =
        element.matches ||
        element.matchesSelector ||
        element.mozMatchesSelector ||
        element.msMatchesSelector ||
        element.oMatchesSelector ||
        element.webkitMatchesSelector;
      if (!matcher) {
        return false;
      }
      return matcher.call(element, selector);
    }

    function ElementCreationObserver() {
      this.mutationObserver = null;
    }

    ElementCreationObserver.prototype.startObserving = function(selectorToObserve, callback) {
      if (!window.MutationObserver || window.MutationObserver._isPolyfilled) {
        var monetElementObserverFunctionName = 'monetElementObserver_' + '_' + Math.floor(Math.random() * 10000);

        window[monetElementObserverFunctionName] = function() {
          var matchingElements = Array.prototype.slice.call(document.querySelectorAll(selectorToObserve));
          if (matchingElements.length > 0) {
            callback(matchingElements);
          }
          window[monetElementObserverFunctionName] = null;
        };

        var scriptSource = 'window.' + monetElementObserverFunctionName + '();';
        var scriptBase64URI = 'data:text/javascript;base64,' + btoa(scriptSource);

        var triggerScript = document.createElement('script');
        triggerScript.setAttribute('type', 'text/javascript');
        triggerScript.setAttribute('src', scriptBase64URI);

        // IE10 behavior on when a dynamic script tag gets executed doesn't
        // seem to be obvious. Scheduling the script to execute at the end
        // of the current event loop seems to be the most reliable way
        // to get the script to execute before web components start to execute.
        setTimeout(function() {
          document.head.appendChild(triggerScript);
        }, 0);
      } else {
        var config = { attributes: false, childList: true, characterData: false, subtree: true };
        this.mutationObserver = new MutationObserver(function(mutations) {
          var matchedNodes = [];

          mutations.forEach(function(mutationRecord) {
            if (mutationRecord.type !== 'childList') {
              return;
            }

            var addedNodes = Array.prototype.slice.call(mutationRecord.addedNodes);
            addedNodes.forEach(function(addedNode) {
              if (addedNode.nodeType !== Node.ELEMENT_NODE) {
                return;
              }
              if (elementMatchesSelector(addedNode, selectorToObserve)) {
                matchedNodes.push(addedNode);
              }
              var subtreeMatches = addedNode.querySelectorAll(selectorToObserve);
              Array.prototype.push.apply(matchedNodes, subtreeMatches);
            });
          });

          if (matchedNodes.length > 0) {
            callback(matchedNodes);
          }
        });
        this.mutationObserver.observe(document, config);
      }
    };

    ElementCreationObserver.prototype.stopObserving = function() {
      if (!!this.mutationObserver) {
        this.mutationObserver.disconnect();
        this.mutationObserver = null;
      }
    };

    return ElementCreationObserver;
  })();

  /**
   * MonetLoader
   *
   *
   *
   */
  var MonetLoader = (function() {
    var MONET_SDK_URL = 'https://ae.nflximg.net/monet/scripts/monet.min.js';
    var ENABLER_URL = 'https://s0.2mdn.net/ads/studio/Enabler.js';

    var monetInitialized = false;
    var scriptURLToLoadPromise = {};

    function loadScript(scriptURL) {
      var script = document.createElement('script');
      var loadPromise = listenForLoad(script);
      script.setAttribute('type', 'text/javascript');
      script.setAttribute('src', scriptURL);
      document.head.appendChild(script);
      return loadPromise;
    }

    function ensureExternalScriptExecuted(scriptURL) {
      var scriptPromise = scriptURLToLoadPromise[scriptURL];
      if (!scriptPromise) {
        scriptPromise = scriptURLToLoadPromise[scriptURL] = loadScript(scriptURL);
      }
      return scriptPromise;
    }

    function ensureMonetSDKInjected() {
      if (!!window.Monet) {
        return Promise.resolve();
      }
      return ensureExternalScriptExecuted(MONET_SDK_URL);
    }

    function ensureEnablerInjected() {
      if (!!window.Enabler) {
        return Promise.resolve();
      }
      return ensureExternalScriptExecuted(ENABLER_URL);
    }

    function ensureEnablerInitialized() {
      if (Enabler.isInitialized()) {
        return Promise.resolve();
      }
      return new Promise(function(resolve, reject) {
        Enabler.addEventListener(studio.events.StudioEvent.INIT, function() {
          resolve();
        });
      });
    }

    function initializeMonet() {
      // Enabler script is typically already injected, no need to parallelize Enabler and
      // monet loading
      return ensureEnablerInjected()
        .then(ensureMonetSDKInjected)
        .then(ensureEnablerInitialized)
        .then(function() {
          if (!monetInitialized) {
            monetInitialized = true;
            Monet.initialize(Enabler);
          }
          return Monet;
        });
    }

    function MonetLoader() {}
    MonetLoader.prototype.getInitialized = function() {
      return initializeMonet();
    };
    return MonetLoader;
  })();

  /**
   * MonetDataProvider
   *
   *
   *
   */
  var MonetDataProvider = (function() {
    function processAssets(monetDataProvider, monetAssets) {
      // assign exit url
      var getExitURLForKey = function(key) {
        return monetAssets.rootAssets[key] && monetAssets.rootAssets[key].url;
      };
      monetAssets.rootAssets['url.Exit_URL'] = {
        type: 'url',
        id: 'Exit_URL',
        url: chooseExitURL(
          getExitURLForKey('url.Exit_URL_Desktop'),
          getExitURLForKey('url.Exit_URL_iOS'),
          getExitURLForKey('url.Exit_URL_Android')
        )
      };
      // apply optional transformations
      monetDataProvider.dataTransformers.forEach(function(transformer) {
        transformer.call(monetDataProvider, monetAssets, monetDataProvider);
      });

      return monetAssets;
    }

    function loadPrimaryAssets(monetDataProvider, monet) {
      if (!monetDataProvider.primaryAssetsPromise) {
        var monetRequestParams = monet.buildMonetRequest();
        monetDataProvider.primaryAssetsPromise = new Promise(function(resolve, reject) {
          monet.load(
            monetRequestParams,
            function(monetAssets) {
              log('info', 'Monet assets loaded:', monetAssets);
              monet.logEvent('MONET_ASSETS_LOADED');
              var processedAssets = processAssets(monetDataProvider, monetAssets);
              resolve(processedAssets);
            },
            function(error) {
              reject(error);
            }
          );
        });
      }
      return monetDataProvider.primaryAssetsPromise;
    }

    function loadBackupAssets(monetDataProvider, monet) {
      if (!monetDataProvider.backupAssetsPromise) {
        monetDataProvider.backupAssetsPromise = doHTTPRequest(monetDataProvider.backupLocation)
          .then(function(backupMonetAssets) {
            log('info', 'backup.json loaded:', backupMonetAssets);
            monet.logEvent('BACKUP_ASSETS_LOADED');
            backupMonetAssets = JSON.parse(backupMonetAssets);
            backupMonetAssets.isBackupData = true;
            var processedAssets = processAssets(monetDataProvider, backupMonetAssets);
            return Promise.resolve(processedAssets);
          })
          .catch(function(error) {
            return Promise.reject(error);
          });
      }
      return monetDataProvider.backupAssetsPromise;
    }

    function MonetDataProvider(monetLoader, backupLocation) {
      this.backupLocation = backupLocation || 'backup.json';
      this.monetLoader = monetLoader;

      this.dataLoadPromise = null;
      this.dataLoadFinished = false;
      this.loadedData = null;

      this.primaryAssetsPromise = null;
      this.backupAssetsPromise = null;

      this.dataTransformers = [];
    }

    MonetDataProvider.prototype.loadData = function() {
      var monetLoader = this.monetLoader;
      var monetDataProvider = this;

      if (!this.dataLoadPromise) {
        this.dataLoadPromise = monetLoader
          .getInitialized()
          .then(function(monet) {
            return loadPrimaryAssets(monetDataProvider, monet);
          })
          .then(null, function() {
            log('warn', 'Primary assets failed to load from Monet, trying backup at "' + monetDataProvider.backupLocation + '"');
            return monetLoader.getInitialized().then(function(monet) {
              return loadBackupAssets(monetDataProvider, monet);
            });
          })
          .then(
            function(data) {
              monetDataProvider.dataLoadFinished = true;
              return (monetDataProvider.loadedData = data);
            },
            function(error) {
              log('error', 'Backup assets failed to load!');
              log('error', '"backup.json" can be obtained from C2.0 Manifest Manager.');
              monetDataProvider.dataLoadFinished = true;
              return Promise.reject(error);
            }
          );
      }
      return this.dataLoadPromise;
    };

    MonetDataProvider.prototype.isDataLoaded = function() {
      return this.dataLoadFinished;
    };

    MonetDataProvider.prototype.getDataWhenLoaded = function() {
      return this.dataLoadPromise.then(function(data) {
        return data;
      });
    };

    MonetDataProvider.prototype.getBackupData = function() {
      var monetDataProvider = this;

      return this.monetLoader.getInitialized().then(function(monet) {
        return loadBackupAssets(monetDataProvider, monet).then(function(backupAssets) {
          return backupAssets;
        });
      });
    };

    MonetDataProvider.prototype.addDataTransformer = function(dataTransformer) {
      this.dataTransformers.push(dataTransformer);
    };

    return MonetDataProvider;
  })();

  /**
   * Monet Integrator Web Component
   *
   *
   *
   */
  (function() {
    var registeredComponents = [];
    var readyComponents = [];

    function verifyReady(mi, component) {
      if (mi.hasAttribute('ready')) {
        return;
      }
      if (component) {
        var index = registeredComponents.indexOf(component);
        if (index > -1) {
          readyComponents = readyComponents.concat(registeredComponents.splice(index, 1));
        }
      }
      if (!registeredComponents.length) {
        if (!readyComponents.length) {
          log('warn', 'No Monet components registered!');
        }
        log('info', 'Monet environment is ready.');
        mi.setAttribute('ready', '');
        fireEvent(mi, 'ready');
      }
    }

    function fireEvent(mi, eventName) {
      var event = new CustomEvent(eventName, {
        bubbles: true,
        cancelable: true
      });
      mi.dispatchEvent(event);
    }

    var proto = Object.create(HTMLElement.prototype, {
      pendingLogs: {
        value: [],
        enumerable: false
      },

      createdCallback: {
        value: function() {
          this.monetLoader = null;
          this.monetDataProvider = null;
        },
        enumerable: true
      },

      attachedCallback: {
        value: function() {
          if (this._attached) return;
          this._attached = true;
          var component = this;

          this.monetLoader = new MonetLoader();
          this.monetLoader.getInitialized().then(function(monet) {
            if (component.pendingLogs.length === 0) {
              return;
            }
            var pendingLogs = component.pendingLogs.slice();
            component.pendingLogs.length = 0;
            monet.logEvents(pendingLogs);
          });

          this.monetDataProvider = new MonetDataProvider(this.monetLoader, this.getAttribute('backup-json-path'));
          this.monetDataProvider
            .loadData()
            .then(function() {
              log('info', 'Listening for Monet components...');
              setTimeout(function() {
                verifyReady(component);
              }, 3000);
            })
            .catch(function(error) {
              fireEvent(component, 'error');
            });
        },
        enumerable: true
      },

      attributeChangedCallback: {
        value: function(attributeName) {},
        enumerable: true
      },

      isDataLoaded: {
        value: function() {
          return !!this.monetDataProvider && this.monetDataProvider.isDataLoaded();
        }
      },

      getMonetData: {
        value: function() {
          return this.monetDataProvider.getDataWhenLoaded();
        }
      },

      getBackupMonetData: {
        value: function() {
          return this.monetDataProvider.getBackupData();
        }
      },

      addDataTransformer: {
        value: function(transformer) {
          return this.monetDataProvider.addDataTransformer(transformer);
        }
      },

      getExitElementId: {
        value: function() {
          return this.getAttribute('exit-element-id');
        }
      },

      logEvent: {
        value: function(eventType, eventData) {
          if (!this.monetLoader) {
            // TODO (shashank): Capture timing parameters here
            this.pendingLogs.push({
              eventType: eventType,
              eventData: eventData
            });
            return;
          }
          this.monetLoader.getInitialized().then(
            function(monet) {
              monet.logEvent(eventType, eventData);
            },
            function(error) {
              log('error', 'Failed to log Monet event', error, eventType, eventData);
            }
          );
        }
      },

      register: {
        value: function(component) {
          component.addEventListener(
            'ready',
            function(event) {
              log(
                'info',
                'Monet component <' + event.target.tagName.toLowerCase() + ' id="' + event.target.id + '" /> is ready.'
              );
              verifyReady(this, event.target);
            }.bind(this)
          );
          registeredComponents.push(component);
        }
      },

      preview: {
        value: function() {
          return false;
        }
      }
    });

    document.registerElement('monet-integrator', { prototype: proto });
  })();
})();
