// bare bones Reflect.construct polyfill
// to avoid loading ~55 kb es6-shim
// following logic based on paulmillr's es6-shim
(function() {
  window.Utils = window.Utils || {};

  var _apply = Function.call.bind(Function.apply);
  var domAll = typeof document === 'undefined' || !document ? null : document.all;
  var _toString = Function.call.bind(Object.prototype.toString);
  var isCallable =
    typeof /abc/ === 'function'
      ? function IsCallableSlow(x) {
          // Some old browsers (IE, FF) say that typeof /abc/ === 'function'
          return typeof x === 'function' && _toString(x) === '[object Function]';
        }
      : function IsCallableFast(x) {
          return typeof x === 'function';
        };
  var create =
    Object.create ||
    function(prototype, properties) {
      var Prototype = function Prototype() {};
      Prototype.prototype = prototype;
      var object = new Prototype();
      if (typeof properties !== 'undefined') {
        keys(properties).forEach(function(key) {
          _defineByDescriptor(object, key, properties[key]);
        });
      }
      return object;
    };
  var throwsError = function(func) {
    try {
      func();
      return false;
    } catch (e) {
      return true;
    }
  };
  var arePropertyDescriptorsSupported = function() {
    // if Object.defineProperty exists but throws, it's IE 8
    return !throwsError(function() {
      return Object.defineProperty({}, 'x', { get: function() {} }); // eslint-disable-line getter-return
    });
  };
  var supportsDescriptors = !!Object.defineProperty && arePropertyDescriptorsSupported();

  function typeIsObject(x) {
    if (x === void 0 || x === null || x === true || x === false) {
      return false;
    }
    return typeof x === 'function' || typeof x === 'object' || x === domAll;
  }

  function call(F, V) {
    var args = arguments.length > 2 ? arguments[2] : [];
    if (!isCallable(F)) {
      throw new TypeError(F + ' is not a function');
    }
    return _apply(F, V, args);
  }

  function _defineByDescriptor(object, property, descriptor) {
    if (supportsDescriptors) {
      Object.defineProperty(object, property, descriptor);
    } else if ('value' in descriptor) {
      object[property] = descriptor.value;
    }
  }

  Utils.reflectConstruct = function(C, args, newTarget) {
    var target = typeof newTarget === 'undefined' ? C : newTarget;

    if (window.Reflect) {
      return Reflect.construct(C, args, target);
    }

    var proto = target.prototype;
    if (!typeIsObject(proto)) {
      proto = Object.prototype;
    }
    var obj = create(proto);
    // Call the constructor.
    var result = call(C, obj, args);
    return typeIsObject(result) ? result : obj;
  };
})();
